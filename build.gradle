buildscript {
    repositories {
        mavenCentral()
	mavenLocal()
        maven {
            name = 'ForgeFS'
            url = 'http://files.minecraftforge.net/maven'
        }
	maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name 'CB Maven FS'
        url "http://chickenbones.net/maven/"
    }
    /*maven {
         name "ProfMobius Maven FS"
         url "http://mobiusstrip.eu/maven"
    }*/
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
	    ivy {
        name "CoFHCore"
        artifactPattern "http://addons-origin.cursecdn.com/files/2230/211/[module]-[revision].[ext]"
    }
	flatDir {
	dirs 'libs'
	}
}

apply plugin: 'forge'


group= 'hermitcore' 


// Define properties file
ext.configFile = file "build.properties"


configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
configurations {
    deployerJars
}


dependencies {
    compile "mantle:Mantle:${config.minecraft_version}-${config.mantle_version}:deobf"
	compile "tconstruct:TConstruct:${config.minecraft_version}-${config.tconstruct_version}:deobf"
    compile "codechicken:CodeChickenLib:${config.minecraft_version}-${config.CCLIB_version}:dev"
    compile "codechicken:CodeChickenCore:${config.minecraft_version}-${config.ccc_version}:dev"
    compile "codechicken:NotEnoughItems:${config.minecraft_version}-${config.NEI_version}:dev"
    compile "codechicken:ForgeMultipart:${config.minecraft_version}-${config.fmp_version}:dev"
	//runtime files('libs/AoA-2.4.B.jar')
    //runtime fileTree(dir: 'libs', include: '*.jar')
	//compile name: 'AoA-2.4.B'
	compile name: 'CoFHCore', version: '[1.7.10]3.0.0RC7-211-dev', ext: 'jar'
	compile files('libs/AoA-2.4.B.jar')
	compile files('libs/ProjectE-1.7.10-PE1.9.3.jar')
	runtime fileTree(dir: 'libs', include: '*.jar')
	//compile "nevermine:AoA:${config.minecraft_version}-${config.AoA_verison}"
    //compile "mcp.mobius.waila:Waila:${config.waila_version}"
    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

// Finds and sets version data
task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    proc.waitFor()
    if (proc.exitValue() == 0) {
        ext.revision = proc.text.trim()
    } else {
        ext.revision = "GITBORK"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "build${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${config.mod_version}.${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${config.minecraft_version}-${artifact_version}"

minecraft {
    version = "1.7.10-10.13.4.1448-1.7.10"
    runDir = 'eclipse'
    //replace '${version}', project.version
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceSets {
    main {
        resources {
            srcDir 'resources'
        }
        java {
            srcDir 'src'
        }
    }
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}
